quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DB_USER}
quarkus.datasource.password=${DB_PASS}
quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
quarkus.datasource.jdbc.max-size=16
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.hibernate-orm.database.generation.create-schemas=true

quarkus.swagger-ui.always-include=true
quarkus.smallrye-openapi.info-title=PedeAi API Pedidos
%dev.quarkus.smallrye-openapi.info-title=PedeAi API Pedidos (development)
%test.quarkus.smallrye-openapi.info-title=PedeAi API Pedidos (test)
quarkus.smallrye-openapi.info-version=1.0.0
quarkus.smallrye-openapi.info-description=API de gerenciamento de pedidos para restaurantes/lanchonetes.
quarkus.smallrye-openapi.info-contact-email=contato@pedeai-api.com
quarkus.smallrye-openapi.info-contact-name=Suporte PedeAi API Pedidos
quarkus.smallrye-openapi.info-contact-url=http://pedeai-api.com/suporte
quarkus.smallrye-openapi.info-license-name=Apache 2.0
quarkus.smallrye-openapi.info-license-url=https://www.apache.org/licenses/LICENSE-2.0.html

quarkus.http.non-application-root-path=/
# gateway.pagamento.mock=${GATEWAY_PAGAMENTO_MOCK}
# mercadopago.access.token=${MERCADOPAGO_ACCESS_TOKEN}
# webhook.url=${WEBHOOK_URL} #TODO

# quarkus.rest-client.payment-adapter-mock.url=http://gpm:3000
# quarkus.rest-client.payment-adapter-mock.scope=jakarta.inject.Singleton
# quarkus.rest-client.payment-adapter-mock.verify-host=false

quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:8080,https://editor.swagger.io
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with
quarkus.http.cors.exposed-headers=location,content-disposition
quarkus.http.cors.access-control-allow-credentials=true

# quarkus.rest-client."org.jfm.controller.rest.client.ClienteService".url=https://stage.code.quarkus.io/api
# quarkus.rest-client.cliente-api.url=https://stage.code.quarkus.io/api
# quarkus.rest-client.cliente-api.scope=jakarta.inject.Singleton
# ClienteServiceClient base URI
# In a production environment, you could replace <cliente-service-url> with an AWS API Gateway URL or use AWS Service Discovery (if using ECS or EKS) to get the service address dynamically.
pagamento-api/mp-rest/url=http://app-pagamentos-svc:8081
cliente-api/mp-rest/url=http://app-clientes-svc:8081
# pagamento-api/mp-rest/scope=jakarta.inject.Singleton
# cliente-api/mp-rest/scope=jakarta.inject.Singleton

# cliente-api/mp-rest/scope=jakarta.enterprise.context.ApplicationScoped
# quarkus.rest-client.cliente-api.url=http://app-clientes-svc:8081
# quarkus.rest-client.pagamento-api.url=http://app-pagamentos-svc:8081
# quarkus.rest-client.cliente-api.scope=jakarta.enterprise.context.ApplicationScoped
# quarkus.rest-client.pagamento-api.scope=jakarta.enterprise.context.ApplicationScoped

# cliente-api/mp-rest/scope=javax.inject.Singleton
# cliente-api/mp-rest/connectTimeout=5000
# cliente-api/mp-rest/readTimeout=10000